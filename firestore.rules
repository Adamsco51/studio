
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if user is the owner of a document
    function isOwner(userId, resource) {
      return request.auth.uid == resource.data.createdByUserId || request.auth.uid == resource.data.userId;
    }
    
    // Helper function to check job title
    function hasJobTitle(userId, requiredJobTitles) {
      let userJobTitle = get(/databases/$(database)/documents/users/$(userId)).data.jobTitle;
      return userJobTitle in requiredJobTitles;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if request.auth != null; // Allow authenticated users to create their own profile initially
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      // Delete typically handled by admin functions or restricted.
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Company Settings: Allow all authenticated users to read, only admins to write
    match /companySettings/main {
        allow read: if request.auth != null;
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Clients Collection
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (isOwner(request.auth.uid, resource) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete for now
    }

    // Bills of Lading Collection
    match /billsOfLading/{blId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (isOwner(request.auth.uid, resource) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Expenses Collection
    match /expenses/{expenseId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Allow update/delete if owner of the expense (employeeId) OR owner of parent BL OR admin
      allow update: if request.auth != null && (
                      request.auth.uid == resource.data.employeeId || 
                      (exists(/databases/$(database)/documents/billsOfLading/$(resource.data.blId)) && 
                       get(/databases/$(database)/documents/billsOfLading/$(resource.data.blId)).data.createdByUserId == request.auth.uid) || 
                      isAdmin(request.auth.uid)
                    );
      allow delete: if request.auth != null && (
                      request.auth.uid == resource.data.employeeId || 
                      (exists(/databases/$(database)/documents/billsOfLading/$(resource.data.blId)) && 
                       get(/databases/$(database)/documents/billsOfLading/$(resource.data.blId)).data.createdByUserId == request.auth.uid) || 
                      isAdmin(request.auth.uid)
                    );
    }

    // Work Types Collection
    match /workTypes/{workTypeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins can create/manage work types
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Containers Collection
    match /containers/{containerId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (isOwner(request.auth.uid, resource) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Trucks Collection
    match /trucks/{truckId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Manager", "Agent Opérationnel"]));
      allow update: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Manager", "Agent Opérationnel"]));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Drivers Collection
    match /drivers/{driverId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Manager", "Agent Opérationnel"]));
      allow update: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Manager", "Agent Opérationnel"]));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Transports Collection
    match /transports/{transportId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Manager", "Agent Opérationnel"]));
      allow update: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Manager", "Agent Opérationnel"]));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Approval Requests Collection
    match /approvalRequests/{requestId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || request.auth.uid == resource.data.requestedByUserId);
      allow create: if request.auth != null; // Any authenticated user can create a request
      allow update: if request.auth != null && isAdmin(request.auth.uid); // Only admins can update status (approve/reject)
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete requests
    }

    // Chat Messages Collection
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user can send messages
      allow update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isOwner(request.auth.uid, resource)); // Owner or admin
    }

    // Todo Items Collection
    match /todoItems/{todoId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
                      isAdmin(request.auth.uid) || 
                      isOwner(request.auth.uid, resource) || // Creator can update
                      request.auth.uid == resource.data.assignedToUserId // Assignee can update (e.g., mark complete)
                    );
      allow delete: if request.auth != null && (isAdmin(request.auth.uid) || isOwner(request.auth.uid, resource));
    }
    
    // Audit Log Sessions Collection (Admin read-only for app, write via backend/functions ideally)
    match /auditLogSessions/{logId} {
        allow read: if request.auth != null && isAdmin(request.auth.uid);
        allow create, update, delete: if false; // App should not directly write here, use functions
    }

    // Secretary Documents (Placeholder Rules - adjust based on specific requirements)
    match /secretaryDocuments/{documentId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Secrétaire", "Manager"]));
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Secrétaire", "Manager"]));
      allow update: if request.auth != null && (isAdmin(request.auth.uid) || (hasJobTitle(request.auth.uid, ["Secrétaire", "Manager"]) && isOwner(request.auth.uid, resource)));
      allow delete: if request.auth != null && (isAdmin(request.auth.uid) || (hasJobTitle(request.auth.uid, ["Secrétaire", "Manager"]) && isOwner(request.auth.uid, resource)));
    }
    
    // Accounting Entries (Placeholder Rules - adjust based on specific requirements)
    match /accountingEntries/{entryId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Comptable", "Manager"]));
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || hasJobTitle(request.auth.uid, ["Comptable", "Manager"]));
      allow update: if request.auth != null && (isAdmin(request.auth.uid) || (hasJobTitle(request.auth.uid, ["Comptable", "Manager"]) && isOwner(request.auth.uid, resource)));
      allow delete: if request.auth != null && (isAdmin(request.auth.uid) || (hasJobTitle(request.auth.uid, ["Comptable", "Manager"]) && isOwner(request.auth.uid, resource)));
    }

  }
}
