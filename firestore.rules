
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read their own profile, admins can read/write all.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null; // Allows users to create their own profile during signup
      allow update: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // No delete rule for users for now, manage through Firebase console or admin interface if needed
    }

    // Company Settings: Authenticated users can read, admins can write.
    match /companySettings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Clients: Authenticated users can read. Create/Update/Delete by creator or admin.
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Bills of Lading (BLs): Authenticated users can read. Create/Update/Delete by creator or admin.
    match /billsOfLading/{blId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Expenses: Authenticated users can read. Create/Update/Delete by creator or admin.
    match /expenses/{expenseId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // employeeId is set to request.auth.uid
      allow update, delete: if request.auth != null && (resource.data.employeeId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Work Types: Authenticated users can read. Create/Update/Delete by admin only.
    match /workTypes/{workTypeId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Trucks: Authenticated users can read. Create/Update/Delete by admin only (or adjust if employees manage them).
    match /trucks/{truckId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Drivers: Authenticated users can read. Create/Update/Delete by admin only (or adjust if employees manage them).
    match /drivers/{driverId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Transports: Authenticated users can read. Create/Update/Delete by creator or admin.
    match /transports/{transportId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Containers: Authenticated users can read. Create/Update/Delete by creator or admin.
    match /containers/{containerId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Approval Requests: Users can create their own, read their own. Admins can read/write all.
    match /approvalRequests/{requestId} {
      allow read: if request.auth != null && (resource.data.requestedByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null;
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can process requests
      // No delete for now
    }
    
    // Chat Messages: Authenticated users can read/create. No update/delete for simplicity.
    match /chatMessages/{messageId} {
        allow read, create: if request.auth != null;
        // allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid; // Example if needed
    }

    // Todo Items: Authenticated users can manage their own todos or todos assigned to them (or be admin).
    match /todoItems/{todoId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || resource.data.assignedToUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Audit Log (Sessions): Only Admins can read. System (functions) creates.
    match /auditLogSessions/{logId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow create: if true; // Allow backend/functions to write. Consider more specific rules if needed.
    }

    // Secretary Documents: Only users with specific roles (Secretary, Manager) or Admins.
    match /secretaryDocuments/{docId} {
      function isAuthorizedSecretaryRole() {
        let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.jobTitle;
        return userRole == 'Secr√©taire' || userRole == 'Manager';
      }
      allow read: if request.auth != null && (isAuthorizedSecretaryRole() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && (isAuthorizedSecretaryRole() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update, delete: if request.auth != null && (
                                (resource.data.createdByUserId == request.auth.uid && isAuthorizedSecretaryRole()) ||
                                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                              );
    }

    // Accounting Entries: Only users with specific roles (Comptable, Manager) or Admins.
    match /accountingEntries/{entryId} {
       function isAuthorizedAccountingRole() {
        let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.jobTitle;
        return userRole == 'Comptable' || userRole == 'Manager';
      }
      allow read: if request.auth != null && (isAuthorizedAccountingRole() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && (isAuthorizedAccountingRole() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update, delete: if request.auth != null && (
                                (resource.data.createdByUserId == request.auth.uid && isAuthorizedAccountingRole()) ||
                                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                              );
    }

  }
}
