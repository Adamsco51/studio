rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read/write access to all documents in the 'clients' collection if the user is authenticated
    match /clients/{clientId} {
      allow read, write: if request.auth != null;
    }
    // Autoriser la lecture et l'écriture sur la collection 'billsOfLading' si l'utilisateur est authentifié
    match /billsOfLading/{blId} {
      allow read, write: if request.auth != null;
    }
    
    // Autoriser la lecture et l'écriture sur la collection 'depenses' si l'utilisateur est authentifié
    match /expenses/{expenseId} {
      allow read, write: if request.auth != null;
      allow update: if request.auth != null && request.resource.data.employeeId == request.auth.uid; // L'utilisateur peut modifier ses propres dépenses
// Ou si un admin doit pouvoir modifier :
// allow update: if request.auth != null && (request.resource.data.employeeId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Autoriser la lecture et l'écriture sur la collection 'types de trvail' si l'utilisateur est authentifié
    match /workTypes/{workTypeId} {
      allow read, write: if request.auth != null;
    }
    
    //user permission
     match /users/{userId} {
      // Permet à un utilisateur de créer son propre profil (typiquement lors de l'inscription)
      allow create: if request.auth.uid == userId;
      // Permet à un utilisateur de lire son propre profil
      allow read: if request.auth.uid == userId;
      // Permet à un utilisateur de mettre à jour son propre profil (ex: changer son nom d'affichage)
      allow update: if request.auth.uid == userId;
      // Empêche la suppression (ou à définir selon vos besoins)
      allow delete: if false; 
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    	allow create: if request.auth.uid == userId;
  // L'utilisateur peut lire son propre profil, OU un admin peut lire n'importe quel profil
  		allow read: if request.auth.uid == userId || 
                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
  		allow update: if request.auth.uid == userId; // Pour l'instant, seul l'utilisateur peut modifier son propre profil
  		allow delete: if false;
      allow update: if request.auth.uid == userId ||
                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
   		allow create: if request.auth.uid == userId;
      allow read: if request.auth.uid == userId ||
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Un utilisateur peut mettre à jour son propre profil OU un admin peut mettre à jour n'importe quel profil
      allow update: if request.auth.uid == userId ||
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if false; // Ou des règles plus spécifiques pour la suppression par les admins
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
   }
    
    match /approvalRequests/{requestId} {
      // Permet à un utilisateur authentifié de créer une demande si l'UID correspond
      allow create: if request.auth.uid == request.resource.data.requestedByUserId;
      
      // Pour l'instant, seul l'admin peut lire/modifier les demandes (à affiner plus tard)
      allow read, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    	allow read: if request.auth.uid == resource.data.requestedByUserId || 
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
 			// Un utilisateur authentifié peut créer une demande si son UID correspond à requestedByUserId dans la demande
      allow create: if request.auth.uid == request.resource.data.requestedByUserId;
      
      // Seuls les admins peuvent lire toutes les demandes et les mettre à jour (approuver/rejeter)
      allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // La suppression des demandes pourrait être réservée aux admins ou désactivée
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
		   
    }
    
  
    // Chat Messages
    match /chatMessages/{messageId} {
      allow read: if request.auth != null; // Authenticated users can read
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid; // User can only send as themselves
      // update, delete typically false for chat messages by users
    }

    // Todo Items
    match /todoItems/{todoId} {
      allow read: if request.auth != null; // Authenticated users can read
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid; // User can create as themselves
      // Allow update if user is creator, assignee, or admin
      allow update: if request.auth != null && 
                      (request.resource.data.createdByUserId == request.auth.uid || 
                       request.resource.data.assignedToUserId == request.auth.uid ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // Allow delete if user is creator or admin
      allow delete: if request.auth != null &&
                      (request.resource.data.createdByUserId == request.auth.uid ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    match /auditLogSessions/{eventId} {
      // Un utilisateur authentifié peut créer un événement de session pour lui-même
      allow create: if request.auth.uid == request.resource.data.userId;
      // Seuls les administrateurs peuvent lire le journal d'audit
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Personne ne devrait pouvoir modifier ou supprimer des entrées d'audit
      allow update, delete: if false;
    }
    
    
    match /companySettings/main {
      // Tous les utilisateurs authentifiés peuvent lire (si nécessaire pour afficher le nom de l'app globalement)
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Seuls les administrateurs peuvent ÉCRIRE/modifier les informations de l'entreprise
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}