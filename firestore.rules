
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to get user's job title
    function getJobTitle(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.jobTitle;
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null; // Authenticated users can read any profile (for display names, etc.)
      allow create: if request.auth != null; // Allow creating own profile (e.g., during signup)
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid); // Allow updating own profile or if admin
      allow delete: if isAdmin(request.auth.uid); // Only admins can delete user profiles
    }

    // Company Settings
    match /companySettings/main {
      allow read: if request.auth != null; // All authenticated users can read company settings
      allow write: if isAdmin(request.auth.uid); // Only admins can write
    }

    // Bills of Lading
    match /billsOfLading/{blId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user can create
      allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid); // Owner or admin
      allow delete: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid); // Owner or admin
    }

    // Clients
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
      allow delete: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // An expense is linked to a BL, creator of expense is employeeId
      allow update: if request.auth.uid == resource.data.employeeId || isAdmin(request.auth.uid);
      allow delete: if request.auth.uid == resource.data.employeeId || isAdmin(request.auth.uid);
    }
    
    // Work Types
    match /workTypes/{workTypeId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null; // Assuming any authenticated user can add a work type template for now
        allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
        allow delete: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
    }

    // Containers
    match /containers/{containerId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
        allow delete: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
    }

    // Trucks
    match /trucks/{truckId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null; // Typically admins or managers
        allow update: if isAdmin(request.auth.uid) || getJobTitle(request.auth.uid) == 'Manager'; // Admins or Managers
        allow delete: if isAdmin(request.auth.uid) || getJobTitle(request.auth.uid) == 'Manager'; // Admins or Managers
    }

    // Drivers
    match /drivers/{driverId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null; // Typically admins or managers
        allow update: if isAdmin(request.auth.uid) || getJobTitle(request.auth.uid) == 'Manager'; // Admins or Managers
        allow delete: if isAdmin(request.auth.uid) || getJobTitle(request.auth.uid) == 'Manager'; // Admins or Managers
    }

    // Transports
    match /transports/{transportId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid) || getJobTitle(request.auth.uid) == 'Manager';
        allow delete: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid) || getJobTitle(request.auth.uid) == 'Manager';
    }
    
    // Approval Requests
    match /approvalRequests/{requestId} {
        allow read: if request.auth != null; // Users can read their own, admins can read all
        allow create: if request.auth != null; // Users can create requests
        allow update: if isAdmin(request.auth.uid); // Only admins can update status (approve/reject)
        allow delete: if isAdmin(request.auth.uid); // Only admins can delete requests (rarely needed)
    }

    // Chat Messages
    match /chatMessages/{messageId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null; // Any authenticated user can send messages
        allow update: if false; // Messages are generally not editable
        allow delete: if isAdmin(request.auth.uid); // Only admins can delete messages
    }

    // Todo Items
    match /todoItems/{todoId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null; // Any authenticated user can create todos
        allow update: if request.auth.uid == resource.data.createdByUserId || (resource.data.assignedToUserId != null && request.auth.uid == resource.data.assignedToUserId) || isAdmin(request.auth.uid); // Creator, assignee, or admin
        allow delete: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid); // Creator or admin
    }
    
    // Audit Log (Sessions) - Admin only
    match /auditLogSessions/{logId} {
      allow read, write, delete: if isAdmin(request.auth.uid);
      allow create: if true; // System/backend can write this
    }

    // Secretary Documents
    match /secretaryDocuments/{documentId} {
      allow read: if request.auth != null && (getJobTitle(request.auth.uid) == 'Secrétaire' || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
      allow create: if request.auth != null && (getJobTitle(request.auth.uid) == 'Secrétaire' || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
      allow update: if request.auth != null && ((getJobTitle(request.auth.uid) == 'Secrétaire' && request.auth.uid == resource.data.createdByUserId) || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && ((getJobTitle(request.auth.uid) == 'Secrétaire' && request.auth.uid == resource.data.createdByUserId) || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
    }

    // Accounting Entries
    match /accountingEntries/{entryId} {
      allow read: if request.auth != null && (getJobTitle(request.auth.uid) == 'Comptable' || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
      allow create: if request.auth != null && (getJobTitle(request.auth.uid) == 'Comptable' || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
      allow update: if request.auth != null && ((getJobTitle(request.auth.uid) == 'Comptable' && request.auth.uid == resource.data.createdByUserId) || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && ((getJobTitle(request.auth.uid) == 'Comptable' && request.auth.uid == resource.data.createdByUserId) || getJobTitle(request.auth.uid) == 'Manager' || isAdmin(request.auth.uid));
    }

  }
}
