
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // User Profiles
    match /users/{userId} {
      allow read: if request.auth != null; // Allow any authenticated user to read any profile (e.g., for display names)
      allow write: if request.auth.uid == userId || isAdmin(request.auth.uid); // User can update their own profile, or admin can
      allow create: if request.auth.uid == userId || isAdmin(request.auth.uid); // User can create their own profile, or admin can (for init)
    }

    // Clients
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user can create a client
      allow update: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || isAdmin(request.auth.uid));
    }

    // Bills of Lading (BLs)
    match /billsOfLading/{blId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || isAdmin(request.auth.uid));
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if request.auth != null;
      // Assuming employeeId is who created/is responsible for the expense
      allow create: if request.auth != null && request.resource.data.employeeId == request.auth.uid;
      allow update: if request.auth != null && (resource.data.employeeId == request.auth.uid || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && (resource.data.employeeId == request.auth.uid || isAdmin(request.auth.uid));
    }

    // Work Types
    match /workTypes/{workTypeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins can create work types
      allow update: if request.auth != null && isAdmin(request.auth.uid); // Only admins can update work types
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete work types
    }

    // Containers
    match /containers/{containerId} {
      allow read: if request.auth != null;
      // Typically, creating a container is linked to creating/editing a BL.
      // Access to BL implies access to its containers for now.
      // createdByUserId on container links to who *added* it to the BL.
      allow create: if request.auth != null; // User creating/editing the BL can add containers
      allow update: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || isAdmin(request.auth.uid));
    }

    // Trucks
    match /trucks/{truckId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Typically admins manage fleet
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Drivers
    match /drivers/{driverId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Typically admins manage drivers
      allow update: if request.auth != null && isAdmin(request.auth.uid);
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Approval Requests
    match /approvalRequests/{requestId} {
      allow read: if request.auth != null; // Any auth user can read (e.g., user reads their own, admin reads all)
      allow create: if request.auth != null && request.resource.data.requestedByUserId == request.auth.uid;
      allow update: if request.auth != null && isAdmin(request.auth.uid); // Only admins can process (approve/reject)
      allow delete: if false; // Generally, requests should not be deleted, only statuses changed.
    }

    // Chat Messages
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
      allow update, delete: if false; // Messages are generally immutable
    }

    // Todo Items
    match /todoItems/{todoId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid;
      // Allow update/delete by creator or assignee or admin
      allow update: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || resource.data.assignedToUserId == request.auth.uid || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || isAdmin(request.auth.uid));
    }
    
    // Audit Log for Sessions
    match /auditLogSessions/{logId} {
        allow read: if request.auth != null && isAdmin(request.auth.uid); // Only admins can read session logs
        allow create: if true; // Allow any backend process (or trusted client) to create log entries
        allow update, delete: if false; // Logs should be immutable
    }

    // Company Settings
    match /companySettings/main {
        allow read: if request.auth != null; // All authenticated users can read company settings
        allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admins can write company settings
    }

  }
}
