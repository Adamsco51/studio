
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin
    // Assumes admin UIDs are stored in an environment variable or directly in rules (less secure for direct UIDs)
    // For a more robust solution, consider a custom claim or an 'admins' collection.
    function isAdmin() {
      // Replace 'YOUR_ADMIN_UID_HERE' with the actual admin user's UID
      // It's better to manage this via custom claims or a dedicated admin collection for multiple admins.
      // return isAuthenticated() && request.auth.uid == 'YOUR_ADMIN_UID_HERE';
      // For now, let's assume an 'admin' role is stored in the user's profile document
       return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(docData) {
      return isAuthenticated() && request.auth.uid == docData.createdByUserId;
    }
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId; // User can create their own profile
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin()); // User can update their own, admin can update any
      allow delete: if isAdmin(); // Only admins can delete user profiles
    }

    match /clients/{clientId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data) || isAdmin());
    }

    match /billsOfLading/{blId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data) || isAdmin());
    }

    match /expenses/{expenseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/billsOfLading/$(request.resource.data.blId)).data) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/billsOfLading/$(resource.data.blId)).data) || isAdmin());
    }

    match /workTypes/{workTypeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isAdmin(); // Or isOwner(resource.data) if createdByUserId is added
      allow delete: if isAuthenticated() && isAdmin(); // Or isOwner(resource.data)
    }

    match /containers/{containerId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated(); // User who created the BL can add containers
      allow update: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/billsOfLading/$(request.resource.data.blId)).data) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/billsOfLading/$(resource.data.blId)).data) || isAdmin());
    }

    match /trucks/{truckId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated(); // Typically admins or designated logistics managers
      allow update: if isAuthenticated() && isAdmin(); // Or based on roles
      allow delete: if isAuthenticated() && isAdmin();
    }

    match /drivers/{driverId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated(); // Typically admins or designated logistics managers
      allow update: if isAuthenticated() && isAdmin(); // Or based on roles
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    match /transports/{transportId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(resource.data) || isAdmin());
      allow delete: if isAuthenticated() && (isOwner(resource.data) || isAdmin());
    }

    match /approvalRequests/{requestId} {
      allow read: if isAuthenticated(); // Users can read their own or admins can read all
      allow create: if isAuthenticated(); // Any authenticated user can create a request
      allow update: if isAdmin(); // Only admins can update (approve/reject) requests
      allow delete: if isAdmin(); // Only admins can delete requests
    }

    match /chatMessages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if false; // Messages are typically immutable
      allow delete: if isAdmin(); // Admins might be able to delete messages
    }

    match /todoItems/{todoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated(); // Allow user to update (e.g., complete, reassign if allowed)
      allow delete: if isAuthenticated() && (isOwner(resource.data) || isAdmin());
    }
    
    match /auditLogSessions/{logId} {
        allow read: if isAdmin(); // Only admins can read audit logs
        allow create: if true; // System or server-side should write these
        allow update: if false;
        allow delete: if isAdmin(); // Admins might clean up old logs
    }

    match /companySettings/main {
        allow read: if isAuthenticated(); // All authenticated users can read company settings
        allow write: if isAdmin(); // Only admins can write/update company settings
    }
  }
}
