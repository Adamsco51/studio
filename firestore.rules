rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users:
    // - Authenticated users can read their own profile.
    // - Authenticated users can create their own profile upon signup.
    // - Only the user or an admin can update their own profile (displayName, not role by non-admin).
    // - Admins can read all user profiles.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null &&
                       (request.auth.uid == userId && (!('role' in request.resource.data) || request.resource.data.role == resource.data.role)) || // User can update their own, but not change their role
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Admin can update anything
      // Deletion of user profiles is typically handled by backend functions or manually for safety.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Company Settings (single document)
    // - All authenticated users can read (e.g., for appName).
    // - Only admins can write.
    match /companySettings/main {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Clients
    // - Authenticated users can create clients (createdByUserId is set).
    // - Users can read/update/delete clients they created or if they are admin.
    // - All authenticated users can read all clients (for dropdowns, lists, etc.).
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid;
      allow update, delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // WorkTypes
    // - Authenticated users can create work types (createdByUserId is set).
    // - Users can read/update/delete work types they created or if they are admin.
    // - All authenticated users can read all work types (for dropdowns).
    match /workTypes/{workTypeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid;
      allow update, delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Bills of Lading (BLs)
    // - Authenticated users can create BLs (createdByUserId is set).
    // - Users can read/update/delete BLs they created or if they are admin.
    // - All authenticated users can read all BLs.
    match /billsOfLading/{blId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid;
      allow update: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // Delete might be more complex if it needs to cascade delete expenses/containers - often handled by admin or with approval flow
      allow delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Expenses
    // - Authenticated users can create expenses for a BL (employeeId is set to their UID).
    // - Users can read expenses for BLs they have access to (implicitly all BLs are readable by authenticated users for now).
    // - Users can update/delete expenses they created or if they are admin.
    match /expenses/{expenseId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.employeeId == request.auth.uid;
      allow update, delete: if request.auth != null && (resource.data.employeeId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Containers
    // - Authenticated users can create containers for a BL (createdByUserId is set to their UID).
    // - Users can read containers for BLs they have access to.
    // - Users can update/delete containers they created or if they are admin.
    match /containers/{containerId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid
                      && request.resource.data.blId is string; // Ensure blId is present
      allow update: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow delete: if request.auth != null && (resource.data.createdByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Approval Requests
    // - Authenticated users can create approval requests for themselves.
    // - Users can read their own approval requests.
    // - Admins can read all approval requests and update their status.
    match /approvalRequests/{requestId} {
      allow read: if request.auth != null && (resource.data.requestedByUserId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.resource.data.requestedByUserId == request.auth.uid;
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can update (approve/reject)
      // Deletion of approval requests could be restricted to admins or disallowed
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Chat Messages
    // - All authenticated users can read and create messages.
    // - Deletion/update could be restricted (e.g., to sender or admin, not implemented here for simplicity).
    match /chatMessages/{messageId} {
      allow read, create: if request.auth != null;
      // allow update, delete: if request.auth != null && (resource.data.senderId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Todo Items
    // - All authenticated users can read.
    // - Authenticated users can create todos (createdByUserId is set).
    // - Users can update/delete todos they created or are assigned to, or if they are admin.
    match /todoItems/{todoId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdByUserId == request.auth.uid;
      allow update, delete: if request.auth != null &&
                               (resource.data.createdByUserId == request.auth.uid ||
                                ('assignedToUserId' in resource.data && resource.data.assignedToUserId == request.auth.uid) || // Check if assignedToUserId exists before accessing
                                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Audit Log for Sessions
    // - Creation should ideally be from a trusted backend/function, but for client-side logging:
    //   Allow authenticated users to create their own log entries.
    // - Only admins can read audit logs.
    match /auditLogSessions/{logId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // User logs their own session
      // No update/delete for audit logs generally
    }
  }
}

    