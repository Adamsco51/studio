
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a user is the creator of a document
    function isCreator(docData, userId) {
      return docData.createdByUserId == userId;
    }

    // Users collection:
    // Admins can read/write all user profiles.
    // Authenticated users can read their own profile and update their own displayName.
    // Creating a user profile is handled server-side or by admin initially.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins can create new profiles directly
      allow update: if request.auth != null && 
                      ( (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName','email'])) || 
                        isAdmin(request.auth.uid) );
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Clients collection
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user can add a client
      allow update: if request.auth != null && (isCreator(resource.data, request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete clients for now
    }

    // Bills of Lading collection
    match /billsOfLading/{blId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user can add a BL
      allow update: if request.auth != null && (isCreator(resource.data, request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete BLs
    }
    
    // Expenses collection
    match /expenses/{expenseId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user can add an expense
      allow update: if request.auth != null && (request.auth.uid == resource.data.employeeId || isAdmin(request.auth.uid)); // Creator or Admin
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete for now
    }

    // Work Types collection
    match /workTypes/{workTypeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user
      allow update: if request.auth != null && (isCreator(resource.data, request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins
    }

    // Containers collection
    match /containers/{containerId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user associated with the BL or admin
      allow update: if request.auth != null && (isCreator(resource.data, request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins for now
    }

    // Trucks collection
    match /trucks/{truckId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Any authenticated user can add a truck for now
      allow update: if request.auth != null && (isCreator(resource.data, request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins
    }

    // Drivers collection (Placeholder, adjust as needed)
    // match /drivers/{driverId} {
    //   allow read: if request.auth != null;
    //   allow create: if request.auth != null && isAdmin(request.auth.uid); // Example: Only admin adds drivers
    //   allow update: if request.auth != null && isAdmin(request.auth.uid);
    //   allow delete: if request.auth != null && isAdmin(request.auth.uid);
    // }
    
    // Chat Messages collection
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId; // Sender can create
      // No update/delete for chat messages by users for simplicity
      allow update: if false;
      allow delete: if false;
    }

    // Todo Items collection
    match /todoItems/{todoId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdByUserId; // Creator can create
      allow update: if request.auth != null && (request.auth.uid == resource.data.createdByUserId || request.auth.uid == resource.data.assignedToUserId || isAdmin(request.auth.uid) ); // Creator, assignee or admin
      allow delete: if request.auth != null && (request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid) ); // Creator or admin
    }

    // Approval Requests collection
    match /approvalRequests/{requestId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.requestedByUserId || isAdmin(request.auth.uid));
      allow create: if request.auth != null; // Any authenticated user can create a request
      allow update: if request.auth != null && isAdmin(request.auth.uid); // Only admin can update (approve/reject)
      allow delete: if false; // No direct deletion by users
    }

    // Audit Log Sessions collection
    match /auditLogSessions/{logId} {
        allow read: if request.auth != null && isAdmin(request.auth.uid); // Only admins can read audit logs
        allow create: if true; // Allow server-side (functions) or any authenticated user to log (if client-side logging is ever used)
        allow update: if false;
        allow delete: if false;
    }
    
    // Company Settings document
    match /companySettings/main {
      allow read: if request.auth != null; // All authenticated users can read company settings
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admins can write
    }
  }
}
