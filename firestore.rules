
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      // Replace with your actual admin UID
      return request.auth.uid == "YOUR_ADMIN_UID_HERE";
    }

    function isOwner(docData) {
      return request.auth.uid == docData.createdByUserId;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId; // User can create their own profile
      allow update: if isSignedIn() && (isAdmin() || request.auth.uid == userId); // Admin or owner can update
      // No delete for user profiles usually, or admin only
    }

    // Company Settings
    match /companySettings/main {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isAdmin();
    }

    // Clients
    match /clients/{clientId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can create a client
      allow update: if isSignedIn() && (isOwner(resource.data) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data) || isAdmin());
    }

    // Bills of Lading (BLs)
    match /billsOfLading/{blId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
                      (isOwner(resource.data) || isAdmin()) ||
                      // Allow if the update operation *only* targets the containerIds field
                      (request.writeFields.hasAll(['containerIds']) && request.writeFields.size() == 1)
                    );
      allow delete: if isSignedIn() && (isOwner(resource.data) || isAdmin());
    }

    // Expenses
    match /expenses/{expenseId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data) || isAdmin());
    }

    // Work Types
    match /workTypes/{workTypeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data) || isAdmin());
    }

    // Containers
    match /containers/{containerId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can create a container (associating with a BL they might not own)
      allow update: if isSignedIn() && (isOwner(resource.data) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data) || isAdmin());
    }

    // Trucks
    match /trucks/{truckId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isAdmin(); // Only admins can create trucks
      allow update: if isSignedIn() && isAdmin(); // Only admins can update trucks
      allow delete: if isSignedIn() && isAdmin(); // Only admins can delete trucks
    }

    // Drivers
    match /drivers/{driverId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isAdmin(); // Only admins can create drivers
      allow update: if isSignedIn() && isAdmin(); // Only admins can update drivers
      allow delete: if isSignedIn() && isAdmin(); // Only admins can delete drivers
    }

    // Transports
    match /transports/{transportId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Assuming any authenticated user can create transport plans
      allow update: if isSignedIn() && (isOwner(resource.data) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data) || isAdmin());
    }

    // Secretary Documents
    match /secretaryDocuments/{documentId} {
      function canManageSecretaryDoc() {
        return isAdmin() || getUserData(request.auth.uid).jobTitle == 'Secr√©taire' || getUserData(request.auth.uid).jobTitle == 'Manager';
      }
      allow read: if isSignedIn() && canManageSecretaryDoc();
      allow create: if isSignedIn() && canManageSecretaryDoc();
      allow update: if isSignedIn() && (isOwner(resource.data) || canManageSecretaryDoc());
      allow delete: if isSignedIn() && (isOwner(resource.data) || canManageSecretaryDoc());
    }

    // Accounting Entries
    match /accountingEntries/{entryId} {
       function canManageAccountingEntry() {
        return isAdmin() || getUserData(request.auth.uid).jobTitle == 'Comptable' || getUserData(request.auth.uid).jobTitle == 'Manager';
      }
      allow read: if isSignedIn() && canManageAccountingEntry();
      allow create: if isSignedIn() && canManageAccountingEntry();
      allow update: if isSignedIn() && (isOwner(resource.data) || canManageAccountingEntry());
      allow delete: if isSignedIn() && (isOwner(resource.data) || canManageAccountingEntry());
    }

    // Approval Requests
    match /approvalRequests/{requestId} {
      allow read: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.requestedByUserId);
      allow create: if isSignedIn(); // Any signed-in user can create a request
      allow update: if isSignedIn() && isAdmin(); // Only admins can update (approve/reject/issue PIN)
      // No delete for approval requests by users, admins could if needed but not typical.
    }

    // Chat Messages
    match /chatMessages/{messageId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can send messages
      // No update/delete for chat messages by users to keep history intact
    }

    // Todo Items
    match /todoItems/{todoId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(resource.data) || request.auth.uid == resource.data.assignedToUserId);
      allow delete: if isSignedIn() && (isOwner(resource.data) || isAdmin());
    }

    // Audit Log (Sessions) - Admin access only
    match /auditLogSessions/{logId} {
      allow read, write: if isSignedIn() && isAdmin();
    }

    // Helper function to get user data (e.g., for jobTitle checks)
    // Note: This requires the user's document to be readable by the rule.
    // The /users/{userId} rule above allows users to read their own profile, which is fine.
    // For cross-user checks (like an admin checking another user's role), specific admin read rules might be needed on /users.
    // However, for checking the *requesting* user's jobTitle, this is okay if /users/{request.auth.uid} is readable.
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
  }
}
