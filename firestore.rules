
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if the user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // User profiles:
    // - Authenticated users can read their own profile
    // - Admins can read any profile
    // - Users can create their own profile upon signup (handled by AuthProvider logic with backend calls if needed)
    // - Users can update their own displayName/email (via backend calls that verify ownership)
    // - Admins can update any user's role/displayName
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow create: if request.auth.uid == userId; // Or allow all authenticated for initial profile creation
      allow update: if request.auth.uid == userId || isAdmin(request.auth.uid);
      // Deletion of user profiles is typically not allowed directly from client, managed by admin processes
    }

    // Company Settings:
    // - All authenticated users can read (for appName etc.)
    // - Only admins can write
    match /companySettings/main {
      allow read: if request.auth != null;
      allow write: if isAdmin(request.auth.uid);
    }

    // Clients:
    // - Authenticated users can read all clients
    // - Users can create clients (request.auth.uid == resource.data.createdByUserId implies ownership on create)
    // - Users can update clients they created OR if they are admin
    // - Admins can delete clients (deletion might trigger approval for non-admins)
    match /clients/{clientId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.createdByUserId;
      allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid); // Or if request is part of an approved deletion flow
    }

    // Bills of Lading (BLs):
    // - Authenticated users can read all BLs
    // - Users can create BLs
    // - Users can update BLs they created OR if they are admin
    // - Admins can delete BLs
    match /billsOfLading/{blId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.createdByUserId;
      allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Expenses:
    // - Authenticated users can read all expenses
    // - Users can create expenses
    // - Users can update expenses they created OR if they are admin
    // - Admins can delete expenses
    match /expenses/{expenseId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.employeeId;
      allow update: if request.auth.uid == resource.data.employeeId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Work Types:
    // - Authenticated users can read all work types
    // - Users can create work types
    // - Users can update work types they created OR if they are admin
    // - Admins can delete work types
    match /workTypes/{workTypeId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.createdByUserId;
      allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Containers:
    // - Authenticated users can read all containers
    // - Users can create containers (linked to a BL they can access/create)
    // - Users can update containers they created OR if they are admin
    // - Admins can delete containers
    match /containers/{containerId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.createdByUserId;
      allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Trucks:
    // - Authenticated users can read all trucks
    // - Users can create trucks (if they have a role that permits fleet management, e.g., admin)
    // - Users can update trucks they created OR if they are admin
    // - Admins can delete trucks
    match /trucks/{truckId} {
      allow read: if request.auth != null;
      allow create: if isAdmin(request.auth.uid); // Or a specific role, for now admin only
      allow update: if isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Drivers:
    // - Authenticated users can read all drivers
    // - Users can create drivers (if admin)
    // - Users can update drivers they created OR if they are admin
    // - Admins can delete drivers
    match /drivers/{driverId} {
      allow read: if request.auth != null;
      allow create: if isAdmin(request.auth.uid); // Or a specific role, for now admin only
      allow update: if isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Transports:
    // - Authenticated users can read all transports
    // - Users can create transports
    // - Users can update transports they created OR if they are admin
    // - Admins can delete transports
    match /transports/{transportId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.createdByUserId;
      allow update: if request.auth.uid == resource.data.createdByUserId || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Approval Requests:
    // - Users can create requests for themselves
    // - Users can read their own requests
    // - Admins can read all requests and update any request
    match /approvalRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.requestedByUserId || isAdmin(request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.requestedByUserId;
      allow update: if isAdmin(request.auth.uid); // Only admins can process/update status
      // Deletion of approval requests is typically not allowed from client
    }

    // Chat Messages:
    // - Authenticated users can read all messages (for group chat)
    // - Authenticated users can create messages
    match /chatMessages/{messageId} {
      allow read, write: if request.auth != null; // Simplistic rule, refine if needed
    }

    // Todo Items:
    // - Authenticated users can read all todos (shared list)
    // - Authenticated users can create todos
    // - Users can update/delete todos they created OR if they are assigned to it OR if admin
    match /todoItems/{todoId} {
      allow read, write: if request.auth != null; // Simplistic, refine for ownership/assignment
      // allow update, delete: if request.auth.uid == resource.data.createdByUserId || request.auth.uid == resource.data.assignedToUserId || isAdmin(request.auth.uid);
    }

    // Audit Log (Sessions):
    // - Only backend/admin can write (via trusted server/functions)
    // - Only admins can read
    match /auditLogSessions/{logId} {
      allow read: if isAdmin(request.auth.uid);
      allow write: if false; // Client should not write directly
    }
  }
}
